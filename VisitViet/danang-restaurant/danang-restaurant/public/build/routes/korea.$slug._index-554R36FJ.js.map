{
  "version": 3,
  "sources": ["../../../app/routes/korea.$slug._index.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\korea.$slug._index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\korea.$slug._index.tsx\");\n  import.meta.hot.lastModified = \"1699097065000\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { RestaurantInfor } from \"~/components/RestaurantInfor\";\nimport { getLanguageCookie } from \"~/helpers/cookies\";\nimport { getRestaurantsByCountryIdAndSlug } from \"~/models/restaurants.server\";\nimport { getTypeByCountry } from \"~/models/type.server\";\nimport { getUser } from \"~/session.server\";\nexport const loader = async ({\n  request,\n  params\n}) => {\n  const user = await getUser(request);\n  const slug = params.slug;\n  const types = await getTypeByCountry({\n    countryId: \"2\"\n  }); //default 1 is VN\n  const category = types.find(it => it.slug === slug);\n  let restaurants;\n  if (category) {\n    restaurants = await getRestaurantsByCountryIdAndSlug({\n      countryId: \"2\",\n      slug\n    }); //default 1 is VN\n  } else {\n    return redirect('/404');\n  }\n  const cookieHeader = request.headers.get(\"Cookie\");\n  const language = await getLanguageCookie(cookieHeader);\n  return json({\n    user,\n    language,\n    restaurants\n  });\n};\nexport default function CategoryKoreaPage() {\n  _s();\n  const {\n    language,\n    restaurants\n  } = useLoaderData();\n  return <div className=\"lg:pl-6 lg:w-[70%] md:overflow-y-auto md:max-h-[100%]\">\n      <div className=\"mt-6 lg:mt-0 lg:grid lg:grid-cols-2 lg:gap-4\">\n        {restaurants.map(restaurant => <RestaurantInfor key={restaurant.id} url={restaurant.id} name={restaurant[`name${language}`]} address={restaurant[`address${language}`]} open={restaurant.openingTime} close={restaurant.closingTime} rating={restaurant.rating || 0} priceLow={restaurant.priceLow || undefined} priceHigh={restaurant.priceHigh || undefined} images={restaurant.images[0]?.url || undefined} language={language} />)}\n      </div>\n    </div>;\n}\n_s(CategoryKoreaPage, \"a3dmF//UEPWrAByrwl70brrc9qw=\", false, function () {\n  return [useLoaderData];\n});\n_c = CategoryKoreaPage;\nvar _c;\n$RefreshReg$(_c, \"CategoryKoreaPage\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAA+B;AAI/B,yBAAiD;AACjD,kBAAiC;AACjC,qBAAwB;AAoCe;AA9DvC,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,8CAAgD,EAAE;AAAA,EAC3F;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAqC;AACrC,cAAY,IAAI,eAAe;AACjC;AAqCe,SAAR,oBAAqC;AAC1C,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,EACF,IAAI,cAAc;AAClB,SAAO,mDAAC,SAAI,WAAU,yDAClB,6DAAC,SAAI,WAAU,gDACZ,sBAAY,IAAI,gBAAW;AA/DpC;AA+DuC,8DAAC,mBAAoC,KAAK,WAAW,IAAI,MAAM,WAAW,OAAO,UAAU,GAAG,SAAS,WAAW,UAAU,UAAU,GAAG,MAAM,WAAW,aAAa,OAAO,WAAW,aAAa,QAAQ,WAAW,UAAU,GAAG,UAAU,WAAW,YAAY,QAAW,WAAW,WAAW,aAAa,QAAW,UAAQ,gBAAW,OAAO,CAAC,MAAnB,mBAAsB,QAAO,QAAW,YAA1V,WAAW,IAAjC;AAAA;AAAA;AAAA;AAAA,WAAoY;AAAA,GAAE,KADva;AAAA;AAAA;AAAA;AAAA,SAEA,KAHG;AAAA;AAAA;AAAA;AAAA,SAIL;AACJ;AACA,GAAG,mBAAmB,gCAAgC,OAAO,WAAY;AACvE,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,mBAAmB;AAEpC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
