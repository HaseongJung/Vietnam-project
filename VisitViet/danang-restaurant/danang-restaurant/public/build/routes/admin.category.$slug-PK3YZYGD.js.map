{
  "version": 3,
  "sources": ["../../../app/routes/admin.category.$slug.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\admin.category.$slug.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\admin.category.$slug.tsx\");\n  import.meta.hot.lastModified = \"1704730700866.3784\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useActionData, useLoaderData, useNavigation } from \"@remix-run/react\";\nimport { useEffect, useRef } from \"react\";\nimport invariant from \"tiny-invariant\";\n\n// Components\nimport { ActionButtons } from \"~/components/ActionButtons\";\nimport { FormInput } from \"~/components/FormInput\";\nimport { createType, deleteTypeBySlug, getTypeById, getTypeBySlug, updateType } from \"~/models/type.server\";\nexport const loader = async ({\n  params,\n  request\n}) => {\n  invariant(params.slug, \"id not found\");\n  if (params.slug === \"new\") {\n    return json({\n      type: null\n    });\n  }\n  const type = await getTypeBySlug(params.slug);\n  if (!type) {\n    throw new Response(\"Not Found\", {\n      status: 404\n    });\n  }\n  return json({\n    type\n  });\n};\nexport const action = async ({\n  request,\n  params\n}) => {\n  invariant(params.slug, \"id not found\");\n  const formData = await request.formData();\n  const action = formData.get(\"_action\");\n  const typeId = formData.get(\"typeId\");\n  const slug = formData.get(\"slug\");\n  const nameEng = formData.get(\"nameEng\")?.toString();\n  const nameKor = formData.get(\"nameKor\")?.toString();\n  const nameVie = formData.get(\"nameVie\")?.toString();\n  const defaultErrors = {\n    typeId: null,\n    slug: null,\n    nameEng: null,\n    nameKor: null,\n    nameVie: null\n  };\n  if (typeof typeId !== \"string\" || typeId.length === 0) {\n    return json({\n      errors: {\n        ...defaultErrors,\n        typeId: \"TypeId is required\"\n      }\n    }, {\n      status: 400\n    });\n  }\n  if (typeof slug !== \"string\" || slug.length === 0) {\n    return json({\n      errors: {\n        ...defaultErrors,\n        slug: \"Slug is required\"\n      }\n    }, {\n      status: 400\n    });\n  }\n  if (typeof nameEng !== \"string\" || nameEng.length === 0) {\n    return json({\n      errors: {\n        ...defaultErrors,\n        nameEng: \"Name Eng is required\"\n      }\n    }, {\n      status: 400\n    });\n  }\n  if (typeof nameKor !== \"string\" || nameKor.length === 0) {\n    return json({\n      errors: {\n        ...defaultErrors,\n        nameKor: \"Name Kor is required\"\n      }\n    }, {\n      status: 400\n    });\n  }\n  if (typeof nameVie !== \"string\" || nameVie.length === 0) {\n    return json({\n      errors: {\n        ...defaultErrors,\n        nameVie: \"Name Vie is required\"\n      }\n    }, {\n      status: 400\n    });\n  }\n\n  // Handle action\n  if (action === \"delete\") {\n    await deleteTypeBySlug(params.slug);\n    return redirect(\"/admin/category\");\n  }\n\n  // Prepare data\n  const dataSubmit = {\n    typeId,\n    slug,\n    nameEng,\n    nameKor,\n    nameVie\n  };\n  if (params.slug === \"new\") {\n    const existingtypeSlug = await getTypeBySlug(slug);\n    if (existingtypeSlug) {\n      return json({\n        errors: {\n          ...defaultErrors,\n          slug: \"A Type already exists with this slug\"\n        }\n      }, {\n        status: 400\n      });\n    }\n    const existingtypeId = await getTypeById(typeId);\n    if (existingtypeId) {\n      return json({\n        errors: {\n          ...defaultErrors,\n          typeId: \"A Type ID already exists\"\n        }\n      }, {\n        status: 400\n      });\n    }\n    await createType(dataSubmit);\n  } else {\n    console.log(dataSubmit);\n    await updateType({\n      ...dataSubmit,\n      typeId: typeId\n    });\n  }\n  return redirect(`/admin/category`);\n};\nexport default function AdmintypeDetailPage() {\n  _s();\n  const {\n    type\n  } = useLoaderData();\n  const actionData = useActionData();\n  const navigation = useNavigation();\n  const isSubmitting = navigation.state === \"submitting\";\n  const isNewItem = !type;\n  const idRef = useRef(null);\n  const slugRef = useRef(null);\n  const nameEngRef = useRef(null);\n  useEffect(() => {\n    if (actionData?.errors?.typeId) {\n      idRef.current?.focus();\n    } else if (actionData?.errors?.slug) {\n      slugRef.current?.focus();\n    }\n  }, [actionData]);\n  return <div className=\"min-h-full flex flex-col\">\n      <Form method=\"post\" className=\"w-full space-y-6\" key={type?.slug ?? \"new\"}>\n        <div className=\"grid grid-cols-2 gap-4\">\n          {/* Left Column */}\n          <div className=\"grid gap-4 content-start\">\n            {/* Name */}\n            <FormInput name=\"typeId\" ref={idRef} required={true} label=\"Type ID\" placeholder=\"Type ID\" defaultValue={type?.typeId} error={actionData?.errors?.typeId} />\n\n            <div className=\"grid grid-cols-[1fr_60px] gap-2\">\n              {/* Slug */}\n              <FormInput name=\"slug\" ref={slugRef} required={true} label=\"Category Slug\" placeholder=\"Category Slug\" defaultValue={type?.slug} error={actionData?.errors?.slug} />\n            </div>\n          </div>\n\n          {/* Right Column */}\n          <div className=\"grid gap-4 content-start\">\n            {/* SEO Title */}\n            <FormInput name=\"nameEng\" label=\"Name English\" required={true} placeholder=\"Type name English\" ref={nameEngRef} defaultValue={type?.nameEng?.toString()} />\n            {/* SEO Title */}\n            <FormInput name=\"nameKor\" label=\"Name Korea\" required={true} placeholder=\"Type name of Korea\" ref={nameEngRef} defaultValue={type?.nameKor?.toString()} />\n            {/* SEO Title */}\n            <FormInput name=\"nameVie\" label=\"Name VietNam\" required={true} placeholder=\"Type name of VietNam\" ref={nameEngRef} defaultValue={type?.nameVie?.toString()} />\n          </div>\n        </div>\n\n        <ActionButtons isNewItem={isNewItem} isSubmitting={isSubmitting} />\n      </Form>\n    </div>;\n}\n_s(AdmintypeDetailPage, \"dOrXCJM2n5vsu7Z9mMPZ9xY2azs=\", false, function () {\n  return [useLoaderData, useActionData, useNavigation];\n});\n_c = AdmintypeDetailPage;\nvar _c;\n$RefreshReg$(_c, \"AdmintypeDetailPage\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "_c", "_a", "_b", "_d"]
}
