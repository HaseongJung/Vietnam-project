{
  "version": 3,
  "sources": ["../../../app/routes/admin.images.$restId.$id.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\admin.images.$restId.$id.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\admin.images.$restId.$id.tsx\");\n  import.meta.hot.lastModified = \"1692289063000\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useLoaderData, useNavigation } from \"@remix-run/react\";\nimport invariant from \"tiny-invariant\";\n\n// Models\n\n// Components\nimport { ActionButtons } from \"~/components/ActionButtons\";\nimport { FormInput } from \"~/components/FormInput\";\nimport { createImage, deleteImage, getImageById, updateImage } from \"~/models/images.server\";\nimport { getRestaurantsById } from \"~/models/restaurants.server\";\nexport const loader = async ({\n  params,\n  request\n}) => {\n  invariant(params.id, \"id not found\");\n  const image = await getImageById(params.id);\n  if (params.id !== \"new\" && !image) {\n    throw new Response(\"Not Found\", {\n      status: 404\n    });\n  }\n  if (params.id === \"new\") {\n    return json({\n      image\n    });\n  }\n  return json({\n    image\n  });\n};\nexport const action = async ({\n  request,\n  params\n}) => {\n  invariant(params.id, \"id not found\");\n  invariant(params.restId, \"id not found\");\n  const restaurant = await getRestaurantsById(params.restId);\n  const formData = await request.formData();\n  const action = formData.get(\"_action\");\n  const url = formData.get(\"url\");\n  const defaultErrors = {\n    url: null\n  };\n  if (typeof url !== \"string\" || url.length === 0) {\n    return json({\n      errors: {\n        ...defaultErrors,\n        type: \"Symbol is required\"\n      }\n    }, {\n      status: 400\n    });\n  }\n\n  // Handle action\n  if (action === \"delete\") {\n    const currentImage = await getImageById(params.id);\n    if (currentImage) {\n      await deleteImage(params.id);\n    }\n    return redirect(`/admin/images/${restaurant?.id}`);\n  }\n\n  // Prepare data\n  let imageSubmit;\n  const dataSubmit = {\n    url,\n    restaurantId: restaurant?.id\n  };\n  if (params.id === \"new\") {\n    imageSubmit = await createImage(dataSubmit);\n  } else {\n    imageSubmit = await updateImage({\n      ...dataSubmit,\n      id: params.id\n    });\n  }\n  return redirect(`/admin/images/${restaurant?.id}/${imageSubmit.id}`);\n};\nexport default function AdminSymbolDetailPage() {\n  _s();\n  const {\n    image\n  } = useLoaderData();\n  const navigation = useNavigation();\n  const isSubmitting = navigation.state === \"submitting\";\n  const isNewItem = !image;\n  return <div className=\"flex min-h-full flex-col max-h-[100%] p-4\">\r\n      <Form method=\"post\" className=\"w-full space-y-6\" key={image?.id ?? \"new\"}>\r\n        <div className=\"\">\r\n          {/* Left Column */}\r\n          <div className=\"\">\r\n            {/* Name */}\r\n            <FormInput name=\"url\" label=\"\u1EA2nh\" placeholder=\"link \u1EA3nh\" defaultValue={image?.url} />\r\n          </div>\r\n        </div>\r\n        <ActionButtons isNewItem={isNewItem} isSubmitting={isSubmitting} />\r\n      </Form>\r\n    </div>;\n}\n_s(AdminSymbolDetailPage, \"AresK/zmnu2vnR+bFl3+wOtJzk8=\", false, function () {\n  return [useLoaderData, useNavigation];\n});\n_c = AdminSymbolDetailPage;\nvar _c;\n$RefreshReg$(_c, \"AdminSymbolDetailPage\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAA+B;AAS/B,oBAAoE;AACpE,yBAAmC;AAoFvB;AAlHZ,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,oDAAsD,EAAE;AAAA,EACjG;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA2C;AAC3C,cAAY,IAAI,eAAe;AACjC;AAmFe,SAAR,wBAAyC;AArGhD;AAsGE,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,cAAc;AAClB,QAAM,aAAa,cAAc;AACjC,QAAM,eAAe,WAAW,UAAU;AAC1C,QAAM,YAAY,CAAC;AACnB,SAAO,mDAAC,SAAI,WAAU,6CAClB,6DAAC,QAAK,QAAO,QAAO,WAAU,oBAC5B;AAAA,uDAAC,SAAI,WAAU,IAEb,6DAAC,SAAI,WAAU,IAEb,6DAAC,aAAU,MAAK,OAAM,OAAM,YAAM,aAAY,iBAAW,cAAc,+BAAO,OAA9E;AAAA;AAAA;AAAA;AAAA,WAAmF,KAFrF;AAAA;AAAA;AAAA;AAAA,WAGA,KALF;AAAA;AAAA;AAAA;AAAA,WAMA;AAAA,IACA,mDAAC,iBAAc,WAAsB,gBAArC;AAAA;AAAA;AAAA;AAAA,WAAiE;AAAA,QARb,oCAAO,OAAP,YAAa,OAAnE;AAAA;AAAA;AAAA;AAAA,SASA,KAVG;AAAA;AAAA;AAAA;AAAA,SAWL;AACJ;AACA,GAAG,uBAAuB,gCAAgC,OAAO,WAAY;AAC3E,SAAO,CAAC,eAAe,aAAa;AACtC,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,uBAAuB;AAExC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
